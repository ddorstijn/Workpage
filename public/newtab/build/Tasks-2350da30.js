
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, k as validate_store, m as component_subscribe, v as validate_slots, l as activeId, A as currentId, B as globals, e as element, a as space, b as attr_dev, c as add_location, f as insert_dev, g as append_dev, D as action_destroyer, n as noop, j as detach_dev, q as listen_dev, y as prevent_default, r as is_function, u as run_all, w as set_store_value, C as validate_each_argument, N as validate_each_keys, t as text, h as set_data_dev, O as fix_position, P as create_animation, T as empty, Q as update_keyed_each, U as fix_and_destroy_block } from './main-ddcf7bf5.js';
import { d as dndzone, f as flip, c as createPopperActions } from './index-310c7e98.js';

/* src/newtab/components/Tasks.svelte generated by Svelte v3.35.0 */

const { console: console_1 } = globals;
const file = "src/newtab/components/Tasks.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[21] = list[i];
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[21] = list[i];
	return child_ctx;
}

// (134:3) {#if showTooltip}
function create_if_block_3(ctx) {
	let div1;
	let input;
	let t;
	let div0;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div1 = element("div");
			input = element("input");
			t = space();
			div0 = element("div");
			attr_dev(input, "type", "date");
			add_location(input, file, 138, 5, 2892);
			attr_dev(div0, "class", "arrow");
			attr_dev(div0, "data-popper-arrow", "");
			add_location(div0, file, 139, 5, 2919);
			attr_dev(div1, "class", "tooltip [ surface elevation-24 ]");
			add_location(div1, file, 134, 4, 2791);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, input);
			append_dev(div1, t);
			append_dev(div1, div0);

			if (!mounted) {
				dispose = action_destroyer(/*popperContent*/ ctx[6].call(null, div1, /*popperOptions*/ ctx[7]));
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(134:3) {#if showTooltip}",
		ctx
	});

	return block;
}

// (189:2) {:else}
function create_else_block_1(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let each_value_1 = /*done*/ ctx[3];
	validate_each_argument(each_value_1);
	const get_key = ctx => /*item*/ ctx[21].id;
	validate_each_keys(ctx, each_value_1, get_each_context_1, get_key);

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1(ctx, each_value_1, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_1(key, child_ctx));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*removeDone, done*/ 2056) {
				each_value_1 = /*done*/ ctx[3];
				validate_each_argument(each_value_1);
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
				validate_each_keys(ctx, each_value_1, get_each_context_1, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, each_1_anchor.parentNode, fix_and_destroy_block, create_each_block_1, each_1_anchor, get_each_context_1);
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
			}
		},
		d: function destroy(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(189:2) {:else}",
		ctx
	});

	return block;
}

// (157:2) {#if !viewDone}
function create_if_block_1(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let each_value = /*todo*/ ctx[2];
	validate_each_argument(each_value);
	const get_key = ctx => /*item*/ ctx[21].id;
	validate_each_keys(ctx, each_value, get_each_context, get_key);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*removeTodo, todo, markDone, dragDisabled, startDrag*/ 17940) {
				each_value = /*todo*/ ctx[2];
				validate_each_argument(each_value);
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
				validate_each_keys(ctx, each_value, get_each_context, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, fix_and_destroy_block, create_each_block, each_1_anchor, get_each_context);
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
			}
		},
		d: function destroy(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(157:2) {#if !viewDone}",
		ctx
	});

	return block;
}

// (190:3) {#each done as item (item.id)}
function create_each_block_1(key_1, ctx) {
	let li;
	let div;
	let span0;
	let t0_value = /*item*/ ctx[21].title + "";
	let t0;
	let t1;
	let span1;
	let i;
	let t3;
	let t4_value = /*item*/ ctx[21].finished + "";
	let t4;
	let t5;
	let button;
	let t7;
	let rect;
	let stop_animation = noop;
	let mounted;
	let dispose;

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			li = element("li");
			div = element("div");
			span0 = element("span");
			t0 = text(t0_value);
			t1 = space();
			span1 = element("span");
			i = element("i");
			i.textContent = "done";
			t3 = space();
			t4 = text(t4_value);
			t5 = space();
			button = element("button");
			button.textContent = "close";
			t7 = space();
			attr_dev(span0, "class", "todo-item__title done svelte-p9zmcz");
			add_location(span0, file, 192, 6, 4321);
			attr_dev(i, "class", "material-icons md-12");
			add_location(i, file, 194, 7, 4429);
			attr_dev(span1, "class", "todo-item__due [ hint ] svelte-p9zmcz");
			add_location(span1, file, 193, 6, 4383);
			attr_dev(div, "class", "todo-item__body");
			add_location(div, file, 191, 5, 4285);
			attr_dev(button, "class", "task-delete material-icons [ md-14 no-gutters ] [ alert ] svelte-p9zmcz");
			attr_dev(button, "title", "Delete task");
			add_location(button, file, 198, 5, 4524);
			attr_dev(li, "class", "todo-item svelte-p9zmcz");
			add_location(li, file, 190, 4, 4213);
			this.first = li;
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, div);
			append_dev(div, span0);
			append_dev(span0, t0);
			append_dev(div, t1);
			append_dev(div, span1);
			append_dev(span1, i);
			append_dev(span1, t3);
			append_dev(span1, t4);
			append_dev(li, t5);
			append_dev(li, button);
			append_dev(li, t7);

			if (!mounted) {
				dispose = listen_dev(
					button,
					"click",
					function () {
						if (is_function(/*removeDone*/ ctx[11](/*item*/ ctx[21]))) /*removeDone*/ ctx[11](/*item*/ ctx[21]).apply(this, arguments);
					},
					false,
					false,
					false
				);

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*done*/ 8 && t0_value !== (t0_value = /*item*/ ctx[21].title + "")) set_data_dev(t0, t0_value);
			if (dirty & /*done*/ 8 && t4_value !== (t4_value = /*item*/ ctx[21].finished + "")) set_data_dev(t4, t4_value);
		},
		r: function measure() {
			rect = li.getBoundingClientRect();
		},
		f: function fix() {
			fix_position(li);
			stop_animation();
		},
		a: function animate() {
			stop_animation();
			stop_animation = create_animation(li, rect, flip, { duration: flipDurationMs });
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(190:3) {#each done as item (item.id)}",
		ctx
	});

	return block;
}

// (177:6) {#if item.due}
function create_if_block_2(ctx) {
	let span;
	let i;
	let t1;
	let t2_value = /*item*/ ctx[21].due + "";
	let t2;

	const block = {
		c: function create() {
			span = element("span");
			i = element("i");
			i.textContent = "event";
			t1 = space();
			t2 = text(t2_value);
			attr_dev(i, "class", "material-icons md-12");
			add_location(i, file, 178, 8, 3889);
			attr_dev(span, "class", "todo-item__due [ hint ] svelte-p9zmcz");
			add_location(span, file, 177, 7, 3842);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, i);
			append_dev(span, t1);
			append_dev(span, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*todo*/ 4 && t2_value !== (t2_value = /*item*/ ctx[21].due + "")) set_data_dev(t2, t2_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(177:6) {#if item.due}",
		ctx
	});

	return block;
}

// (158:3) {#each todo as item (item.id)}
function create_each_block(key_1, ctx) {
	let li;
	let div0;
	let t0;
	let div0_style_value;
	let t1;
	let div1;
	let span;
	let t2_value = /*item*/ ctx[21].title + "";
	let t2;
	let t3;
	let t4;
	let button;
	let t6;
	let rect;
	let stop_animation = noop;
	let mounted;
	let dispose;
	let if_block = /*item*/ ctx[21].due && create_if_block_2(ctx);

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			li = element("li");
			div0 = element("div");
			t0 = text("drag_indicator");
			t1 = space();
			div1 = element("div");
			span = element("span");
			t2 = text(t2_value);
			t3 = space();
			if (if_block) if_block.c();
			t4 = space();
			button = element("button");
			button.textContent = "close";
			t6 = space();
			attr_dev(div0, "aria-label", "drag-handle");
			attr_dev(div0, "class", "drag-handle material-icons md-18 [ hint no-gutters ] svelte-p9zmcz");

			attr_dev(div0, "style", div0_style_value = /*dragDisabled*/ ctx[4]
			? "cursor: grab"
			: "cursor: grabbing");

			add_location(div0, file, 159, 5, 3359);
			attr_dev(span, "class", "todo-item__title line-hover [ no-gutters ] svelte-p9zmcz");
			attr_dev(span, "title", "Mark as done");
			add_location(span, file, 169, 6, 3647);
			add_location(div1, file, 168, 5, 3635);
			attr_dev(button, "class", "task-delete material-icons [ md-14 no-gutters ] [ alert ] svelte-p9zmcz");
			attr_dev(button, "title", "Delete task");
			add_location(button, file, 183, 5, 3994);
			attr_dev(li, "class", "todo-item svelte-p9zmcz");
			add_location(li, file, 158, 4, 3287);
			this.first = li;
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, div0);
			append_dev(div0, t0);
			append_dev(li, t1);
			append_dev(li, div1);
			append_dev(div1, span);
			append_dev(span, t2);
			append_dev(div1, t3);
			if (if_block) if_block.m(div1, null);
			append_dev(li, t4);
			append_dev(li, button);
			append_dev(li, t6);

			if (!mounted) {
				dispose = [
					listen_dev(div0, "mousedown", /*startDrag*/ ctx[14], false, false, false),
					listen_dev(div0, "touchstart", /*startDrag*/ ctx[14], false, false, false),
					listen_dev(
						span,
						"click",
						function () {
							if (is_function(/*markDone*/ ctx[9](/*item*/ ctx[21]))) /*markDone*/ ctx[9](/*item*/ ctx[21]).apply(this, arguments);
						},
						false,
						false,
						false
					),
					listen_dev(
						button,
						"click",
						function () {
							if (is_function(/*removeTodo*/ ctx[10](/*item*/ ctx[21]))) /*removeTodo*/ ctx[10](/*item*/ ctx[21]).apply(this, arguments);
						},
						false,
						false,
						false
					)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*dragDisabled*/ 16 && div0_style_value !== (div0_style_value = /*dragDisabled*/ ctx[4]
			? "cursor: grab"
			: "cursor: grabbing")) {
				attr_dev(div0, "style", div0_style_value);
			}

			if (dirty & /*todo*/ 4 && t2_value !== (t2_value = /*item*/ ctx[21].title + "")) set_data_dev(t2, t2_value);

			if (/*item*/ ctx[21].due) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					if_block.m(div1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		r: function measure() {
			rect = li.getBoundingClientRect();
		},
		f: function fix() {
			fix_position(li);
			stop_animation();
		},
		a: function animate() {
			stop_animation();
			stop_animation = create_animation(li, rect, flip, { duration: flipDurationMs });
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(158:3) {#each todo as item (item.id)}",
		ctx
	});

	return block;
}

// (210:2) {:else}
function create_else_block(ctx) {
	let i;
	let t1;
	let span;

	const block = {
		c: function create() {
			i = element("i");
			i.textContent = "list";
			t1 = space();
			span = element("span");
			span.textContent = "Tasks";
			attr_dev(i, "class", "material-icons md-18");
			add_location(i, file, 210, 3, 4885);
			add_location(span, file, 211, 3, 4929);
		},
		m: function mount(target, anchor) {
			insert_dev(target, i, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, span, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(i);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(210:2) {:else}",
		ctx
	});

	return block;
}

// (207:2) {#if !viewDone}
function create_if_block(ctx) {
	let i;
	let t1;
	let span;

	const block = {
		c: function create() {
			i = element("i");
			i.textContent = "checklist";
			t1 = space();
			span = element("span");
			span.textContent = "History";
			attr_dev(i, "class", "material-icons md-18");
			add_location(i, file, 207, 3, 4802);
			add_location(span, file, 208, 3, 4851);
		},
		m: function mount(target, anchor) {
			insert_dev(target, i, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, span, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(i);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(207:2) {#if !viewDone}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let article;
	let header;
	let form;
	let label;
	let input0;
	let t0;
	let span;
	let t2;
	let button0;
	let t4;
	let t5;
	let input1;
	let t6;
	let ul;
	let dndzone_action;
	let t7;
	let button1;
	let mounted;
	let dispose;
	let if_block0 = /*showTooltip*/ ctx[0] && create_if_block_3(ctx);

	function select_block_type(ctx, dirty) {
		if (!/*viewDone*/ ctx[1]) return create_if_block_1;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block1 = current_block_type(ctx);

	function select_block_type_1(ctx, dirty) {
		if (!/*viewDone*/ ctx[1]) return create_if_block;
		return create_else_block;
	}

	let current_block_type_1 = select_block_type_1(ctx);
	let if_block2 = current_block_type_1(ctx);

	const block = {
		c: function create() {
			article = element("article");
			header = element("header");
			form = element("form");
			label = element("label");
			input0 = element("input");
			t0 = space();
			span = element("span");
			span.textContent = "Write a new task";
			t2 = space();
			button0 = element("button");
			button0.textContent = "event";
			t4 = space();
			if (if_block0) if_block0.c();
			t5 = space();
			input1 = element("input");
			t6 = space();
			ul = element("ul");
			if_block1.c();
			t7 = space();
			button1 = element("button");
			if_block2.c();
			attr_dev(input0, "type", "text");
			attr_dev(input0, "placeholder", "Write a new task");
			input0.required = true;
			attr_dev(input0, "class", "svelte-p9zmcz");
			add_location(input0, file, 121, 4, 2468);
			add_location(span, file, 122, 4, 2534);
			attr_dev(label, "class", "svelte-p9zmcz");
			add_location(label, file, 120, 3, 2456);
			attr_dev(button0, "class", "material-icons [ no-gutters ]");
			attr_dev(button0, "type", "button");
			attr_dev(button0, "title", "Add due date");
			add_location(button0, file, 124, 3, 2579);
			attr_dev(input1, "type", "submit");
			input1.hidden = true;
			add_location(input1, file, 142, 3, 2982);
			attr_dev(form, "class", "svelte-p9zmcz");
			add_location(form, file, 119, 2, 2411);
			attr_dev(header, "class", "svelte-p9zmcz");
			add_location(header, file, 118, 1, 2400);
			attr_dev(ul, "class", "todo-wrapper svelte-p9zmcz");
			add_location(ul, file, 145, 1, 3035);
			attr_dev(button1, "class", "task-actions svelte-p9zmcz");
			add_location(button1, file, 205, 1, 4711);
			attr_dev(article, "class", "svelte-p9zmcz");
			add_location(article, file, 117, 0, 2389);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, article, anchor);
			append_dev(article, header);
			append_dev(header, form);
			append_dev(form, label);
			append_dev(label, input0);
			append_dev(label, t0);
			append_dev(label, span);
			append_dev(form, t2);
			append_dev(form, button0);
			append_dev(form, t4);
			if (if_block0) if_block0.m(form, null);
			append_dev(form, t5);
			append_dev(form, input1);
			append_dev(article, t6);
			append_dev(article, ul);
			if_block1.m(ul, null);
			append_dev(article, t7);
			append_dev(article, button1);
			if_block2.m(button1, null);

			if (!mounted) {
				dispose = [
					action_destroyer(/*popperRef*/ ctx[5].call(null, button0)),
					listen_dev(button0, "click", /*click_handler*/ ctx[15], false, false, false),
					listen_dev(form, "submit", prevent_default(/*addTodo*/ ctx[8]), false, true, false),
					action_destroyer(dndzone_action = dndzone.call(null, ul, {
						items: /*todo*/ ctx[2],
						flipDurationMs,
						dragDisabled: /*dragDisabled*/ ctx[4],
						dropTargetStyle: {}
					})),
					listen_dev(ul, "consider", /*handleDndConsider*/ ctx[12], false, false, false),
					listen_dev(ul, "finalize", /*handleDndFinalize*/ ctx[13], false, false, false),
					listen_dev(button1, "click", /*click_handler_1*/ ctx[16], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (/*showTooltip*/ ctx[0]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					if_block0.m(form, t5);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(ul, null);
				}
			}

			if (dndzone_action && is_function(dndzone_action.update) && dirty & /*todo, dragDisabled*/ 20) dndzone_action.update.call(null, {
				items: /*todo*/ ctx[2],
				flipDurationMs,
				dragDisabled: /*dragDisabled*/ ctx[4],
				dropTargetStyle: {}
			});

			if (current_block_type_1 !== (current_block_type_1 = select_block_type_1(ctx))) {
				if_block2.d(1);
				if_block2 = current_block_type_1(ctx);

				if (if_block2) {
					if_block2.c();
					if_block2.m(button1, null);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(article);
			if (if_block0) if_block0.d();
			if_block1.d();
			if_block2.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const flipDurationMs = 300;

function instance($$self, $$props, $$invalidate) {
	let $activeId;
	let $currentId;
	validate_store(activeId, "activeId");
	component_subscribe($$self, activeId, $$value => $$invalidate(17, $activeId = $$value));
	validate_store(currentId, "currentId");
	component_subscribe($$self, currentId, $$value => $$invalidate(18, $currentId = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Tasks", slots, []);
	const [popperRef, popperContent] = createPopperActions();

	const popperOptions = {
		placement: "bottom-start",
		modifiers: [
			{
				name: "offset",
				options: { offset: [0, 4] }
			}
		]
	};

	// -- Members -- \\
	let showTooltip = false;

	let viewDone = false;
	let todo = [];
	let done = [];
	let dragDisabled = true;

	// -- Initialization -- \\
	activeId.subscribe(val => {
		let todoId = `todo-${val}`;
		let doneId = `done-${val}`;

		chrome.storage.sync.get([todoId, doneId], function (result) {
			$$invalidate(2, todo = result[todoId] ?? []);
			$$invalidate(3, done = result[doneId] ?? []);
			syncTodo();
			syncDone();
		});
	});

	// -- Synchronization -- \\
	async function syncTodo() {
		try {
			chrome.storage.sync.set({ [`todo-${$activeId}`]: todo });
			$$invalidate(2, todo);
		} catch(e) {
			console.error(e);
		}
	}

	async function syncDone() {
		try {
			chrome.storage.sync.set({ [`done-${$activeId}`]: done });
			$$invalidate(3, done);
		} catch(e) {
			console.error(e);
		}
	}

	// -- Functions -- \\
	async function addTodo() {
		todo.unshift({
			id: set_store_value(currentId, $currentId++, $currentId),
			title: this.querySelector("input[type='text']").value,
			due: this.querySelector("input[type='date']")?.value
		});

		this.reset();
		syncTodo();
	}

	async function markDone(item) {
		const index = todo.indexOf(item);

		if (index > -1) {
			const [item] = todo.splice(index, 1);

			done.unshift({
				id: item.id,
				title: item.title,
				finished: new Date().toISOString().slice(0, 10)
			});

			syncTodo();
			syncDone();
		}
	}

	async function removeTodo(item) {
		const index = todo.indexOf(item);

		if (index > -1) {
			todo.splice(index, 1);
		}

		syncTodo();
	}

	async function removeDone(item) {
		const index = done.indexOf(item);

		if (index > -1) {
			done.splice(index, 1);
		}

		syncDone();
	}

	function handleDndConsider(e) {
		$$invalidate(2, todo = e.detail.items);
	}

	function handleDndFinalize(e) {
		$$invalidate(2, todo = e.detail.items);

		if (e.detail.info.source == "pointer") {
			$$invalidate(4, dragDisabled = true);
		}
	}

	function startDrag(e) {
		// preventing default to prevent lag on touch devices (because of the browser checking for screen scrolling)
		e.preventDefault();

		$$invalidate(4, dragDisabled = false);
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Tasks> was created with unknown prop '${key}'`);
	});

	const click_handler = () => $$invalidate(0, showTooltip = !showTooltip);
	const click_handler_1 = () => $$invalidate(1, viewDone = !viewDone);

	$$self.$capture_state = () => ({
		currentId,
		activeId,
		dndzone,
		flip,
		createPopperActions,
		popperRef,
		popperContent,
		popperOptions,
		showTooltip,
		viewDone,
		todo,
		done,
		dragDisabled,
		flipDurationMs,
		syncTodo,
		syncDone,
		addTodo,
		markDone,
		removeTodo,
		removeDone,
		handleDndConsider,
		handleDndFinalize,
		startDrag,
		$activeId,
		$currentId
	});

	$$self.$inject_state = $$props => {
		if ("showTooltip" in $$props) $$invalidate(0, showTooltip = $$props.showTooltip);
		if ("viewDone" in $$props) $$invalidate(1, viewDone = $$props.viewDone);
		if ("todo" in $$props) $$invalidate(2, todo = $$props.todo);
		if ("done" in $$props) $$invalidate(3, done = $$props.done);
		if ("dragDisabled" in $$props) $$invalidate(4, dragDisabled = $$props.dragDisabled);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		showTooltip,
		viewDone,
		todo,
		done,
		dragDisabled,
		popperRef,
		popperContent,
		popperOptions,
		addTodo,
		markDone,
		removeTodo,
		removeDone,
		handleDndConsider,
		handleDndFinalize,
		startDrag,
		click_handler,
		click_handler_1
	];
}

class Tasks extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Tasks",
			options,
			id: create_fragment.name
		});
	}
}

export default Tasks;
//# sourceMappingURL=Tasks-2350da30.js.map
