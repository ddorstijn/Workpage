
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, C as validate_each_argument, N as validate_each_keys, v as validate_slots, p as createEventDispatcher, r as is_function, e as element, t as text, a as space, J as create_component, b as attr_dev, c as add_location, f as insert_dev, g as append_dev, K as mount_component, q as listen_dev, F as group_outros, G as transition_out, L as destroy_component, H as check_outros, E as transition_in, O as fix_position, P as create_animation, j as detach_dev, u as run_all, D as action_destroyer, Q as update_keyed_each, R as fix_and_outro_and_destroy_block, h as set_data_dev, x as set_input_value, y as prevent_default, n as noop } from './main-ddcf7bf5.js';
import { c as createPopperActions, d as dndzone, f as flip } from './index-310c7e98.js';

/* src/newtab/components/SortableGroup.svelte generated by Svelte v3.35.0 */
const file = "src/newtab/components/SortableGroup.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	return child_ctx;
}

// (66:4) {:else}
function create_else_block(ctx) {
	let h5;
	let t_value = /*group*/ ctx[0].title + "";
	let t;

	const block = {
		c: function create() {
			h5 = element("h5");
			t = text(t_value);
			attr_dev(h5, "class", "emphasis");
			add_location(h5, file, 66, 6, 1486);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h5, anchor);
			append_dev(h5, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*group*/ 1 && t_value !== (t_value = /*group*/ ctx[0].title + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(66:4) {:else}",
		ctx
	});

	return block;
}

// (57:4) {#if editing == true}
function create_if_block(ctx) {
	let form;
	let input0;
	let t;
	let input1;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			form = element("form");
			input0 = element("input");
			t = space();
			input1 = element("input");
			attr_dev(input0, "placeholder", "Group name");
			add_location(input0, file, 58, 8, 1298);
			attr_dev(input1, "type", "submit");
			input1.hidden = true;
			add_location(input1, file, 63, 8, 1423);
			add_location(form, file, 57, 6, 1247);
		},
		m: function mount(target, anchor) {
			insert_dev(target, form, anchor);
			append_dev(form, input0);
			set_input_value(input0, /*group*/ ctx[0].title);
			append_dev(form, t);
			append_dev(form, input1);

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", /*input0_input_handler*/ ctx[14]),
					listen_dev(input0, "blur", /*stopEdit*/ ctx[10], false, false, false),
					listen_dev(form, "submit", prevent_default(/*stopEdit*/ ctx[10]), false, true, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*group*/ 1 && input0.value !== /*group*/ ctx[0].title) {
				set_input_value(input0, /*group*/ ctx[0].title);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(form);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(57:4) {#if editing == true}",
		ctx
	});

	return block;
}

// (100:4) {#each group.items as item(item["id"])}
function create_each_block(key_1, ctx) {
	let li;
	let div;
	let t0;
	let div_style_value;
	let t1;
	let switch_instance;
	let t2;
	let rect;
	let stop_animation = noop;
	let current;
	let mounted;
	let dispose;
	var switch_value = /*itemComponent*/ ctx[1];

	function switch_props(ctx) {
		return {
			props: { item: /*item*/ ctx[15] },
			$$inline: true
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));

		switch_instance.$on("remove", function () {
			if (is_function(/*removeItem*/ ctx[8](/*item*/ ctx[15]))) /*removeItem*/ ctx[8](/*item*/ ctx[15]).apply(this, arguments);
		});
	}

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			li = element("li");
			div = element("div");
			t0 = text("drag_indicator");
			t1 = space();
			if (switch_instance) create_component(switch_instance.$$.fragment);
			t2 = space();
			attr_dev(div, "aria-label", "drag-handle");
			attr_dev(div, "class", "drag-handle material-icons md-18 [ hint no-gutters ] svelte-nqsmwp");

			attr_dev(div, "style", div_style_value = /*dragDisabled*/ ctx[2]
			? "cursor: grab"
			: "cursor: grabbing");

			add_location(div, file, 101, 5, 2408);
			attr_dev(li, "class", "svelte-nqsmwp");
			add_location(li, file, 100, 6, 2354);
			this.first = li;
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, div);
			append_dev(div, t0);
			append_dev(li, t1);

			if (switch_instance) {
				mount_component(switch_instance, li, null);
			}

			append_dev(li, t2);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(div, "mousedown", /*startDrag*/ ctx[13], false, false, false),
					listen_dev(div, "touchstart", /*startDrag*/ ctx[13], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (!current || dirty & /*dragDisabled*/ 4 && div_style_value !== (div_style_value = /*dragDisabled*/ ctx[2]
			? "cursor: grab"
			: "cursor: grabbing")) {
				attr_dev(div, "style", div_style_value);
			}

			const switch_instance_changes = {};
			if (dirty & /*group*/ 1) switch_instance_changes.item = /*item*/ ctx[15];

			if (switch_value !== (switch_value = /*itemComponent*/ ctx[1])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));

					switch_instance.$on("remove", function () {
						if (is_function(/*removeItem*/ ctx[8](/*item*/ ctx[15]))) /*removeItem*/ ctx[8](/*item*/ ctx[15]).apply(this, arguments);
					});

					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, li, t2);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		r: function measure() {
			rect = li.getBoundingClientRect();
		},
		f: function fix() {
			fix_position(li);
			stop_animation();
		},
		a: function animate() {
			stop_animation();
			stop_animation = create_animation(li, rect, flip, { duration: flipDurationMs });
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			if (switch_instance) destroy_component(switch_instance);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(100:4) {#each group.items as item(item[\\\"id\\\"])}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div2;
	let header;
	let t0;
	let button0;
	let t2;
	let div1;
	let ul0;
	let li0;
	let button1;
	let i0;
	let t4;
	let t5;
	let li1;
	let button2;
	let i1;
	let t7;
	let t8;
	let div0;
	let t9;
	let ul1;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let dndzone_action;
	let current;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*editing*/ ctx[3] == true) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);
	let each_value = /*group*/ ctx[0].items;
	validate_each_argument(each_value);
	const get_key = ctx => /*item*/ ctx[15]["id"];
	validate_each_keys(ctx, each_value, get_each_context, get_key);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	const block = {
		c: function create() {
			div2 = element("div");
			header = element("header");
			if_block.c();
			t0 = space();
			button0 = element("button");
			button0.textContent = "more_vert";
			t2 = space();
			div1 = element("div");
			ul0 = element("ul");
			li0 = element("li");
			button1 = element("button");
			i0 = element("i");
			i0.textContent = "edit";
			t4 = text("\n\t\t\t\t\t\tEdit group");
			t5 = space();
			li1 = element("li");
			button2 = element("button");
			i1 = element("i");
			i1.textContent = "delete";
			t7 = text("\n\t\t\t\t\t\tDelete group");
			t8 = space();
			div0 = element("div");
			t9 = space();
			ul1 = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(button0, "class", "material-icons menu [ md-18 no-gutters ] svelte-nqsmwp");
			add_location(button0, file, 70, 2, 1547);
			attr_dev(i0, "class", "material-icons [ md-18 warning ]");
			add_location(i0, file, 75, 6, 1772);
			attr_dev(button1, "class", "no-gutters");
			add_location(button1, file, 74, 5, 1717);
			attr_dev(li0, "class", "svelte-nqsmwp");
			add_location(li0, file, 73, 4, 1707);
			attr_dev(i1, "class", "material-icons [ md-18 alert ]");
			add_location(i1, file, 81, 6, 1952);
			attr_dev(button2, "class", "no-gutters");
			add_location(button2, file, 80, 5, 1881);
			attr_dev(li1, "class", "svelte-nqsmwp");
			add_location(li1, file, 79, 4, 1871);
			attr_dev(ul0, "class", "svelte-nqsmwp");
			add_location(ul0, file, 72, 3, 1698);
			attr_dev(div0, "class", "arrow svelte-nqsmwp");
			attr_dev(div0, "data-popper-arrow", "");
			add_location(div0, file, 86, 3, 2061);
			attr_dev(div1, "class", "tooltip svelte-nqsmwp");
			add_location(div1, file, 71, 2, 1639);
			attr_dev(header, "class", "svelte-nqsmwp");
			add_location(header, file, 55, 2, 1206);
			add_location(ul1, file, 89, 2, 2124);
			attr_dev(div2, "class", "group");
			add_location(div2, file, 54, 0, 1184);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, header);
			if_block.m(header, null);
			append_dev(header, t0);
			append_dev(header, button0);
			append_dev(header, t2);
			append_dev(header, div1);
			append_dev(div1, ul0);
			append_dev(ul0, li0);
			append_dev(li0, button1);
			append_dev(button1, i0);
			append_dev(button1, t4);
			append_dev(ul0, t5);
			append_dev(ul0, li1);
			append_dev(li1, button2);
			append_dev(button2, i1);
			append_dev(button2, t7);
			append_dev(div1, t8);
			append_dev(div1, div0);
			append_dev(div2, t9);
			append_dev(div2, ul1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul1, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(/*popperRef*/ ctx[5].call(null, button0)),
					listen_dev(button1, "click", /*startEdit*/ ctx[9], false, false, false),
					listen_dev(
						button2,
						"click",
						function () {
							if (is_function(/*dispatch*/ ctx[4]("remove", /*group*/ ctx[0]))) /*dispatch*/ ctx[4]("remove", /*group*/ ctx[0]).apply(this, arguments);
						},
						false,
						false,
						false
					),
					action_destroyer(/*popperContent*/ ctx[6].call(null, div1, /*popperOptions*/ ctx[7])),
					action_destroyer(dndzone_action = dndzone.call(null, ul1, {
						items: /*group*/ ctx[0].items,
						flipDurationMs,
						dragDisabled: /*dragDisabled*/ ctx[2],
						dropTargetStyle: {}
					})),
					listen_dev(ul1, "consider", /*handleDndConsider*/ ctx[11], false, false, false),
					listen_dev(ul1, "finalize", /*handleDndFinalize*/ ctx[12], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, [dirty]) {
			ctx = new_ctx;

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(header, t0);
				}
			}

			if (dirty & /*itemComponent, group, removeItem, dragDisabled, startDrag*/ 8455) {
				each_value = /*group*/ ctx[0].items;
				validate_each_argument(each_value);
				group_outros();
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
				validate_each_keys(ctx, each_value, get_each_context, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, ul1, fix_and_outro_and_destroy_block, create_each_block, null, get_each_context);
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
				check_outros();
			}

			if (dndzone_action && is_function(dndzone_action.update) && dirty & /*group, dragDisabled*/ 5) dndzone_action.update.call(null, {
				items: /*group*/ ctx[0].items,
				flipDurationMs,
				dragDisabled: /*dragDisabled*/ ctx[2],
				dropTargetStyle: {}
			});
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			if_block.d();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const flipDurationMs = 300;

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("SortableGroup", slots, []);
	let { group } = $$props;
	let { itemComponent } = $$props;
	const dispatch = createEventDispatcher();
	const [popperRef, popperContent] = createPopperActions();
	const popperOptions = { placement: "right-start" };
	let dragDisabled = true;
	let editing = false;

	async function removeItem(item) {
		const index = group.items.indexOf(item);

		if (index > -1) {
			group.items.splice(index, 1);
			dispatch("sync");
		}
	}

	function startEdit() {
		$$invalidate(3, editing = true);
	}

	function stopEdit() {
		$$invalidate(3, editing = false);
		dispatch("sync");
	}

	function handleDndConsider(e) {
		$$invalidate(0, group.items = e.detail.items, group);
	}

	function handleDndFinalize(e) {
		$$invalidate(0, group.items = e.detail.items, group);

		if (e.detail.info.source == "pointer") {
			$$invalidate(2, dragDisabled = true);
		}

		dispatch("sync");
	}

	function startDrag(e) {
		// preventing default to prevent lag on touch devices (because of the browser checking for screen scrolling)
		e.preventDefault();

		$$invalidate(2, dragDisabled = false);
	}

	const writable_props = ["group", "itemComponent"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SortableGroup> was created with unknown prop '${key}'`);
	});

	function input0_input_handler() {
		group.title = this.value;
		$$invalidate(0, group);
	}

	$$self.$$set = $$props => {
		if ("group" in $$props) $$invalidate(0, group = $$props.group);
		if ("itemComponent" in $$props) $$invalidate(1, itemComponent = $$props.itemComponent);
	};

	$$self.$capture_state = () => ({
		createPopperActions,
		createEventDispatcher,
		dndzone,
		flip,
		group,
		itemComponent,
		dispatch,
		popperRef,
		popperContent,
		popperOptions,
		flipDurationMs,
		dragDisabled,
		editing,
		removeItem,
		startEdit,
		stopEdit,
		handleDndConsider,
		handleDndFinalize,
		startDrag
	});

	$$self.$inject_state = $$props => {
		if ("group" in $$props) $$invalidate(0, group = $$props.group);
		if ("itemComponent" in $$props) $$invalidate(1, itemComponent = $$props.itemComponent);
		if ("dragDisabled" in $$props) $$invalidate(2, dragDisabled = $$props.dragDisabled);
		if ("editing" in $$props) $$invalidate(3, editing = $$props.editing);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		group,
		itemComponent,
		dragDisabled,
		editing,
		dispatch,
		popperRef,
		popperContent,
		popperOptions,
		removeItem,
		startEdit,
		stopEdit,
		handleDndConsider,
		handleDndFinalize,
		startDrag,
		input0_input_handler
	];
}

class SortableGroup extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { group: 0, itemComponent: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SortableGroup",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*group*/ ctx[0] === undefined && !("group" in props)) {
			console.warn("<SortableGroup> was created without expected prop 'group'");
		}

		if (/*itemComponent*/ ctx[1] === undefined && !("itemComponent" in props)) {
			console.warn("<SortableGroup> was created without expected prop 'itemComponent'");
		}
	}

	get group() {
		throw new Error("<SortableGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set group(value) {
		throw new Error("<SortableGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get itemComponent() {
		throw new Error("<SortableGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set itemComponent(value) {
		throw new Error("<SortableGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { SortableGroup as S };
//# sourceMappingURL=SortableGroup-0217d184.js.map
